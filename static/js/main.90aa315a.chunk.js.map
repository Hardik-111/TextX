{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","style","color","htmlFor","proptype","PropTypes","string","aboutText","TextForm","useState","text","setText","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.90aa315a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode}  bg navbar -${props.mode}`} >\r\n  <div className=\"container-fluid\"  >\r\n    <a className=\"navbar-brand\" href=\"#\"><h2>{props.title}</h2></a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n      </ul>  \r\n      <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckChecked\" />\r\n  <label className=\"form-check-label\"  style={{color:props.mode==='dark'?'white':'black'}}   htmlFor=\"flexSwitchCheckChecked\">Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.proptype={title : PropTypes.string,\r\n                  aboutText: PropTypes.string,}\r\nexport default Navbar ","import React, {useState} from \"react\"\r\n\r\nfunction TextForm(props) {\r\n\r\n    const [text,setText] = useState('');\r\n    \r\n    const handleUpClick =() => {\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase!\", \"Success\");\r\n    }\r\n\r\n    const handleLoClick =() => {\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase!\", \"Success\");\r\n    }\r\n\r\n    const handleClearClick =() => {\r\n        let newText='';\r\n        setText(newText)\r\n        props.showAlert(\"Cleared Text!\", \"Success\");\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"Success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed Extra Spaces!\", \"Success\");\r\n    }\r\n\r\n    \r\n\r\n\r\n    const handleOnChange=(event) => {\r\n        console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}  >\r\n            <h1>{props.heading}</h1>\r\n             <div className=\"mb-3\">\r\n             <textarea className=\"form-control\" value={text} onChange={handleOnChange}  style={{backgroundColor :props.mode ==='light' ? 'black':'white' , color: props.mode==='light'?'white':'black' }}  id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n        <button className=\"btn btn-info mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-info mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-info mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n        <button className=\"btn btn-info mx-1\" onClick={handleCopy}>Copy Text</button>\r\n        <button className=\"btn btn-info mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your Text Summary  </h2>\r\n            <p>{text.split(\" \").length-1} words  and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default TextForm","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong>: {props.alert.msg} \r\n        </div>\r\n    )\r\n}\r\nexport default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n\n\n\nfunction App() {\n\n const [mode,setMode] = useState('light');\n const [alert, setAlert] = useState(null);\n\n const showAlert =(message,type)=>{\n   setAlert({\n     msg:message,\n     type:type\n   })\n   setTimeout(() => {\n     setAlert(null);\n   }, 2000);\n }\n\n const toggleMode =()=>{\n   if (mode === 'light'){\n     setMode('dark')\n     document.body.style.backgroundColor = 'black';\n     showAlert(\"Dark Mode has been enabled\" , \"Success\")\n     document.title=\"MyText - (Dark Mode)\"\n   }\n  else {\n    setMode('light')\n    document.body.style.backgroundColor = 'white';\n    showAlert(\"Light Mode has been enabled\" , \"Success\")\n    document.title=\"MyText - (Light Mode)\"\n  }\n  \n\n }\n   \n\n  return (\n    <>\n     <Navbar title=\"YourText\" mode={mode} toggleMode={toggleMode} />\n     <Alert alert={alert}/>\n     <div className=\"container my-3\">\n       <TextForm showAlert={showAlert} heading=\"Enter Text to Analyze\" mode={mode} />\n     </div>\n\n    </>\n  );\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}